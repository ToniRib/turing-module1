# Toni Rib - M1 Portfolio

## Individual

### Your Mission

I wanted to learn Ruby well enough to be able to write code in it without constantly having to reference documentation and to become comfortable with object-oriented design and test driven development. Both OO and TDD are completely new to me so I wanted to get enough practice so that they both feel like second nature going forward.  I was also hoping to get much better at Ruby style, since I'm more used to coding with lots of comments and giant, 25 - 100 line functions.

### End of Module Assessment

(Notes & scores from your assessment rubric)

### Attendance

Left at 2pm on Friday, October 23rd because I was sick.

### Work

(Intro)

#### Sorting Suite

* [GitHub URL](https://github.com/ToniRib/sorting-suite)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/sorting_suite.markdown)

(description)

Provides a suite of algorithms and tests for four types of sorting: bubble sort, insertion sort (including in-place), merge sort, and selection sort.

__Comments:__

1. Bubble sort
  * easy to read, simple implementation
  * tests pass, edge cases tested

2. Insertion sort
  * could be a bit easier to read, with loops and breaks.

3. Merge sort
  * beautifully written, simple implementation
  * tests pass, edge cases tested

4. All extras work, tests pass

__Scores:__

* Functional expectations: 4
* Testing: 4
* Ruby Style: 3
* Organization: 4

#### Night Writer

* [GitHub URL](https://github.com/ToniRib/night-writer)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/night_writer.markdown)

This project contains executables to convert a file with English text into a new file with translated braille text, and back again the other direction.

Reviewed by Jeff

__Comments:__

__Scores:__

#### Binary Search Tree

* [GitHub URL](https://github.com/ToniRib/binary-search-tree)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/binary_search_tree.markdown)

The project creates a binary search tree by adding nodes (the first node being the 'head' node) with possible left and right links one at a time to the tree. A node is added to the left link if it is smaller than the current value and added to the right link if it is larger than the current value. The tree uses recursive methods that are located in the nodes, thus making each node 'intelligent' in that it passes along a query to one or both of its links.

Reviewed by Mike Dao

__Comments:__

* 127 tests, all pass.
* All extensions
* Code checks for data type and will only allow trees of matching types to be created.
* Good use of recursion
* Well tested, good, thorough tests, would like to have seen more sad path testing.
* Excellent use of exceptions

__Scores:__

* Functional Expectations: 4
* Test-Driven Development: 3
* Encapsulation / Breaking Logic into Components: 4
* Fundamental Ruby & Style: 4
* Enumerable & Collections: 3

#### Complete Me

* [GitHub URL](https://github.com/ToniRib/Complete_Me)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/complete_me.markdown)

Reviewed by Horace

This project simulates autocomplete functionality. It's basic design is a Trie data structure which uses branching nodes to create paths to words. Words can be added to the 'dictionary' one at a time or in bulk. Suggestions for a particular string are then found by recursively traversing the tree to the subtree that contains the search string and then locating any valid words (words that were added by the user) below that node on the tree. Words can be 'selected' so that words with more selections appear at the beginning of the array of suggestions. Words can also be searched for using a fuzzy search.

__Comments:__

* Nice work with the shoes; other base functionality also working good
* Added the inclusive fuzzy search as well
* Fancy error handling on various inputs
* Overall method tidyness and conciseness is strong
* General enumerable usage is solid; handful of cases where multiple different enumerables might be able to be consolidated

__Scores:__

* Functional Expectations: 4
* TDD: 4
* Ruby Style & Fundamentals: 4
* Encapsulation / Breaking Logic Into Components: 4
* Enumerable & Collections: 3

## Team

### Projects

(Intro)

#### HTTP, Yeah You Know Me

* [GitHub URL](https://github.com/ToniRib/http_yeah_you_know_me)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/http_yeah_you_know_me.markdown)

Project with Hector Huertas

Reviewed by Mike Dao

This project focuses on using HTTP to create a simple server that responds to GET and POST requests. GET requests can be sent directly from the browser address line while POST requests are generated and sent using the Google Chrome extension Postman.

__Comments:__

* 62 tests, all pass.
* One extension
* All functionality works.
* Well organized, code, things were broken out into separate methods in a good fashion.
* Think about class methods, and modules.

__Scores:__

* Overall Functionality: 4
* Fundamental Ruby & Style: 4
* Test-Driven Development: 3
* Breaking Logic into Components: 4

(feedback to me)

#### Headcount

* [GitHub URL](https://github.com/ToniRib/heacount)
* [Original Assignment](https://github.com/turingschool/curriculum/blob/master/source/projects/headcount.markdown)

Project with Aaron Greenspan

Reviewed by

(description)

__Comments:__

__Scores:__

(feedback to me)

## Community

### Giving Feedback

(feedback from me)

### Being a Community Member

#### Feedback 1

Pairing with Toni is awesome because I always learn a lot from her. She is a fountain of knowledge about git and ruby, and many other things. She is easy to work with and I never feel left behind despite the fact that she is more knowledgeable than me at the moment.

### Playing a Part

* made coffee 3 times throughout the module when it was empty
* helped various people in module 1 with debugging when they were stuck
* organized a 1510 happy hour after turing in our first Project
* went to an LGBTuring lunch
* went to Hamburger Mary's with the LGBTuring group

## Review

### Notes

( Leave blanks for reviewers )

### Outcome

( Leave blanks for reviewers )
